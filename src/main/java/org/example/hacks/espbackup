package org.example.hacks;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Rectangle;
import com.sun.jna.Memory;
import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.Kernel32;
import com.sun.jna.platform.win32.WinNT;
import com.sun.jna.ptr.IntByReference;
import org.example.entities.Player;
import org.example.overlay.JHOverlay;
import org.example.overlay.Overlay;
import org.example.util.Geom;
import org.example.util.Geom.*;

import java.util.ArrayList;
import java.util.List;

public class Esp {
    private static WinNT.HANDLE hProcess;
    private static Player localPlayer;
    private static Pointer entityList;
    private static Pointer botCountPtr = null;
    private static int botCount;
    private static Pointer viewMatrixPtr;

    public static void setPointers(WinNT.HANDLE hProcess, Pointer localPlayerPtr, Pointer entityList, Pointer botCountPtr, Pointer viewMatrixPtr) {
        Esp.hProcess = hProcess;
        Esp.localPlayer = new Player(hProcess, localPlayerPtr);
        Esp.entityList = entityList;
        Esp.botCountPtr = botCountPtr;
        Esp.viewMatrixPtr = viewMatrixPtr;
    }

    private static void setBotCount(){
        if (botCountPtr != null)
        {
            IntByReference count = new IntByReference(0);
            Kernel32.INSTANCE.ReadProcessMemory(hProcess, botCountPtr, count.getPointer(), 4, null);
            botCount = count.getValue();
        }
    }

    public static void drawEsp() {
        setBotCount();
        List<Rectangle> rectangles = new ArrayList<>();

        Memory outputBuffer = new Memory(64);
        boolean isRead = Kernel32.INSTANCE.ReadProcessMemory(hProcess, viewMatrixPtr, outputBuffer, (int) outputBuffer.size(), null);
        if (!isRead)
            System.out.println("OkuyamÄ±yom");
        float[] viewMatrix = outputBuffer.getFloatArray(0, 16);

        for(int i = 1; i < botCount + 1; i++) {
            Pointer botPtr = entityList.share((long) i * 0x04);
            Player bot = new Player(hProcess, botPtr);

            int health = bot.getHealth();
            if (health > 100 || health <= 0)
                continue;

            Vector3 feetPos = bot.getPos();
            Vector3 headPos = new Vector3(feetPos.x, feetPos.y, feetPos.z + (float) 4.5);

            Vector3 headScreenPos = Geom.worldToScreen(headPos, viewMatrix);
            Vector3 feetScreenPos = Geom.worldToScreen(feetPos, viewMatrix);

            float height = Math.abs(headScreenPos.y - feetScreenPos.y);
            float width = height / 2;
            Rectangle rectangle = new Rectangle(feetScreenPos.x - width, feetScreenPos.y - height, width, height);

            rectangles.add(rectangle);

            System.out.println(rectangle);
        }
        JHOverlay jhOverlay = Overlay.jhOverlay;
        jhOverlay.addBody(() -> {

            jhOverlay.shapeRenderer.begin(ShapeRenderer.ShapeType.Line);
            jhOverlay.shapeRenderer.setColor(0, 1, 0, 1); // Green color
            for (Rectangle rect: rectangles) {
                jhOverlay.shapeRenderer.rect(rect.x, rect.y, rect.width, rect.height);
            }
            jhOverlay.shapeRenderer.end();
        });
    }
}
